service: lambda-authorizer-example

frameworkVersion: "3"

useDotenv: true

custom:
  custonName: 'lambda-authorizer-${opt:stage, sls:stage, "dev"}'
  secretAuthorizationClientID: "secret-authorization-client-id"
  secretAuthorizationPassword: "secret-authorization-password"

provider:
  name: aws
  stackName: "${self:custom.custonName}-stack"
  runtime: nodejs14.x
  region: us-east-1
  stage: '${opt:stage, sls:stage, "dev"}'
  timeout: 180
  environment:
    NODE_PATH: "./:/opt"
    SECRET_AUTHORIZER_CLIENT_ID: ${self:custom.secretAuthorizationClientID}
    SECRET_AUTHORIZER_PASSWORD: ${self:custom.secretAuthorizationPassword}
  iamRoleStatements:
    - Effect: "Allow"
      Action: "secretsmanager:GetSecretValue"
      Resource: "*"

functions:
  health-check-rest:
    name: "${self:custom.custonName}-health-check-rest"
    handler: src/healthcheck.handler
    events:
      - http:
          path: health-check-rest
          method: get
          authorizer: custom-authorizer-rest

  custom-authorizer-rest:
    handler: src/authorizers/rest.handler

resources:
  Resources:
    # Secrets Manager
    SecretAuthorizationClientID:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:custom.secretAuthorizationClientID}
        Description: "Secrets with Basic Authorization"
        SecretString: "${env:SECRET_AUTHORIZER_CLIENT_ID}"
    SecretAuthorizationPassword:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:custom.secretAuthorizationPassword}
        Description: "Secrets with Basic Authorization"
        SecretString: "${env:SECRET_AUTHORIZER_PASSWORD}"
